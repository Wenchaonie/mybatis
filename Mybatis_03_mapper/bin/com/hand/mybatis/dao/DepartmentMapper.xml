<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hand.mybatis.dao.DepartmentMapper">

   <!-- Department getDeptById(Integer did); -->
   <select id="getDeptById"  resultType="com.hand.mybatis.bean.Department">
       SELECT did id,deptname departName FROM dept WHERE did=#{did}
   </select>
   
    <!--查询部门的时候将部门对应的所有员工信息也查询出来
    -->
   
    <resultMap type="com.hand.mybatis.bean.Department" id="departmentMap">
        <result property="id" column="did"/>
        <result property="departName" column="deptname"/>
        <!--collection定义关联集合类型的属性的封装规则
            ofType:指定集合里面元素的类型  -->
        <collection property="empList" ofType="com.hand.mybatis.bean.Employee">
         <!-- 定义这个集合元素的封装规则 -->
          <id column="eid" property="eId"/>
          <result column="ename" property="eName"/>
          <result column="email" property="email"/>
          <result column="gender" property="gender"/>
        </collection>
    </resultMap>
      
    <!-- Department getDeptByIdStep(Integer did); -->       
    <select id="getDeptByIdPlus" resultMap="departmentMap">
        SELECT d.did,d.deptname,e.eid,e.ename,e.email,e.gender
        FROM dept d
        LEFT JOIN emp e
        ON d.did=e.did 
        WHERE d.did=#{did}
    </select>
    
    
    <!-- select_resultMap关联查询collection分步查询 -->
    
    <resultMap type="com.hand.mybatis.bean.Department" id="departmentMapPlus">
      <id column="did" property="id"/>
      <result column="deptname" property="departName"/>
      <collection property="empList"
          select="com.hand.mybatis.dao.EmployeeMapper.getEmpByDeptId"
          column="{dId=did}" fetchType="lazy">
      </collection>
    </resultMap>
   <!--Department getDeptByIdStep(Integer did); -->
   <select id="getDeptByIdStep" resultMap="departmentMapPlus">
      SELECT did,deptname
      from dept
      WHERE did=#{did}
   </select>
  
  <!--  扩展，多列的值传递过去，将多列的值封装map传递
       column="{key1=column1,key2=column2}" 
       fetchType="lazy":表示使用延迟加载
       - lazy:延迟
       - eager:立即-->
  
</mapper>